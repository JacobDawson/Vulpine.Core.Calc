using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using NUnit.Framework;
using NUnit.Framework.Constraints;
using Vulpine_Core_Calc_Tests.AddOns;

using Vulpine.Core.Calc;
using Vulpine.Core.Calc.Numbers;
using Vulpine.Core.Calc.RandGen;


namespace Vulpine_Core_Calc_Tests.Unit
{
    [TestFixture]
    class JacobiTests
    {
        /// <summary>
        /// the tollarance used in desk calculations. it represents the minimum
        /// amound of relative error allowed in numeric aproximations.
        /// </summary>
        public const Double VTOL = 1.0e-12;

        public const Double LTol = 1.0e-6;

        //stores a rerenece to the tolarance for this instance
        private double tol;

        /// <summary>
        /// Represents the number of tests to run for auto-generated data.
        /// </summary>
        private const int NumTests = 20;


        private const double MaxM = 1.0;
        private const double MinM = -1.0;
        private const double ZeroM = 0.0;

        public JacobiTests() { tol = VTOL; }
        public JacobiTests(double tol) { this.tol = tol; }


        #region K_WideValues...

        private static readonly double[][] K_WideValues =
        {
            new double[] {-4.0, -4.0, +0.9226456659702936, -0.1931692873996115},
            new double[] {-4.0, -3.0, +0.9547943021918690, -0.1578510441164987},
            new double[] {-4.0, -2.0, +0.9827836618197414, -0.1130037219922447},
            new double[] {-4.0, -1.0, +1.0023538882006214, -0.0592813395948073},
            new double[] {-4.0, +0.0, +1.0094529099892116, +0.0},
            new double[] {-4.0, +1.0, +1.0023538882006214, +0.0592813395948073},
            new double[] {-4.0, +2.0, +0.9827836618197414, +0.1130037219922447},
            new double[] {-4.0, +3.0, +0.9547943021918690, +0.1578510441164987},
            new double[] {-4.0, +4.0, +0.9226456659702936, +0.1931692873996115},

            new double[] {-3.0, -4.0, +0.9535789488040512, -0.2309304450374611},
            new double[] {-3.0, -3.0, +0.9966796083098644, -0.1941136432700918},
            new double[] {-3.0, -2.0, +1.0368869696797009, -0.1430138907757651},
            new double[] {-3.0, -1.0, +1.0669043258292005, -0.0767626332742274},
            new double[] {-3.0, +0.0, +1.0782578237498216, +0.0},
            new double[] {-3.0, +1.0, +1.0669043258292005, +0.0767626332742274},
            new double[] {-3.0, +2.0, +1.0368869696797009, +0.1430138907757651},
            new double[] {-3.0, +3.0, +0.9966796083098644, +0.1941136432700918},
            new double[] {-3.0, +4.0, +0.9535789488040512, +0.2309304450374611},

            new double[] {-2.0, -4.0, +0.9828072859190707, -0.2798612805636197},
            new double[] {-2.0, -3.0, +1.0408718798817036, -0.2449711163048068},
            new double[] {-2.0, -2.0, +1.1008325556573280, -0.1891623873371161},
            new double[] {-2.0, -1.0, +1.1508953676782991, -0.1059888365485736},
            new double[] {-2.0, +0.0, +1.1714200841467698, +0.0},
            new double[] {-2.0, +1.0, +1.1508953676782991, +0.1059888365485736},
            new double[] {-2.0, +2.0, +1.1008325556573280, +0.1891623873371161},
            new double[] {-2.0, +3.0, +1.0408718798817036, +0.2449711163048068},
            new double[] {-2.0, +4.0, +0.9828072859190707, +0.2798612805636197},

            new double[] {-1.0, -4.0, +1.0055145128822043, -0.3420446575053614},
            new double[] {-1.0, -3.0, +1.0818616094704879, -0.3166313240911675},
            new double[] {-1.0, -2.0, +1.1727767266293722, -0.2643613655297735},
            new double[] {-1.0, -1.0, +1.2654855220565945, -0.1622369065268035},
            new double[] {-1.0, +0.0, +1.3110287771460599, +0.0},
            new double[] {-1.0, +1.0, +1.2654855220565945, +0.1622369065268035},
            new double[] {-1.0, +2.0, +1.1727767266293722, +0.2643613655297735},
            new double[] {-1.0, +3.0, +1.0818616094704879, +0.3166313240911675},
            new double[] {-1.0, +4.0, +1.0055145128822043, +0.3420446575053614},

            new double[] {+0.0, -4.0, +1.0142199528916402, -0.4167613759836460},
            new double[] {+0.0, -3.0, +1.1066577086973747, -0.4131446756023009},
            new double[] {+0.0, -2.0, +1.2360754981828200, -0.3889182790156602},
            new double[] {+0.0, -1.0, +1.4212722810450360, -0.2953802842147768},
            new double[] {+0.0, +0.0, +1.5707963267948966, +0.0},
            new double[] {+0.0, +1.0, +1.4212722810450360, +0.2953802842147768},
            new double[] {+0.0, +2.0, +1.2360754981828200, +0.3889182790156602},
            new double[] {+0.0, +3.0, +1.1066577086973747, +0.4131446756023009},
            new double[] {+0.0, +4.0, +1.0142199528916402, +0.4167613759836460},

            new double[] {+1.0, -4.0, +1.0012902954809083, -0.4974791089591366},
            new double[] {+1.0, -3.0, +1.0962184367320241, -0.5261202157806421},
            new double[] {+1.0, -2.0, +1.2396974481062428, -0.5649930987575376},
            new double[] {+1.0, -1.0, +1.5092369540512728, -0.6251464152026968},
            //////////// {+1.0, +0.0, INF, INF},
            new double[] {+1.0, +1.0, +1.5092369540512728, +0.6251464152026968},
            new double[] {+1.0, +2.0, +1.2396974481062428, +0.5649930987575376},
            new double[] {+1.0, +3.0, +1.0962184367320241, +0.5261202157806421},
            new double[] {+1.0, +4.0, +1.0012902954809083, +0.4974791089591366},

            new double[] {+2.0, -4.0, +0.9647645498664313, -0.5724252293654310},
            new double[] {+2.0, -3.0, +1.0429132919285160, -0.6296824723086412},
            new double[] {+2.0, -2.0, +1.1477936578355437, -0.7231645198844604},
            new double[] {+2.0, -1.0, +1.2829845888842128, -0.9093670609379803},
            new double[] {+2.0, +0.0, +1.3110287771460599, -1.3110287771460599},
            new double[] {+2.0, +1.0, +1.2829845888842128, +0.9093670609379803},
            new double[] {+2.0, +2.0, +1.1477936578355437, +0.7231645198844604},
            new double[] {+2.0, +3.0, +1.0429132919285160, +0.6296824723086412},
            new double[] {+2.0, +4.0, +0.9647645498664313, +0.5724252293654310},

            new double[] {+3.0, -4.0, +0.9111955638049650, -0.6313342832413452},
            new double[] {+3.0, -3.0, +0.9633740558183941, -0.7017449794606113},
            new double[] {+3.0, -2.0, +1.0170435642865263, -0.8062531787336743},
            new double[] {+3.0, -1.0, +1.0495633400512788, -0.9647117763139704},
            new double[] {+3.0, +0.0, +1.0010773804561062, -1.1714200841467698},
            new double[] {+3.0, +1.0, +1.0495633400512788, +0.9647117763139704},
            new double[] {+3.0, +2.0, +1.0170435642865263, +0.8062531787336743},
            new double[] {+3.0, +3.0, +0.9633740558183941, +0.7017449794606113},
            new double[] {+3.0, +4.0, +0.9111955638049650, +0.6313342832413452},

            new double[] {+4.0, -4.0, +0.8507791690905825, -0.6710823994252824},
            new double[] {+4.0, -3.0, +0.8799482869097269, -0.7412691086931250},
            new double[] {+4.0, -2.0, +0.8997593611897471, -0.8338933759653302},
            new double[] {+4.0, -1.0, +0.8943644725836783, -0.9508137364393680},
            new double[] {+4.0, +0.0, +0.8428751774062980, -1.0782578237498216},
            new double[] {+4.0, +1.0, +0.8943644725836783, +0.9508137364393680},
            new double[] {+4.0, +2.0, +0.8997593611897471, +0.8338933759653302},
            new double[] {+4.0, +3.0, +0.8799482869097269, +0.7412691086931250},
            new double[] {+4.0, +4.0, +0.8507791690905825, +0.6710823994252824},

            
        };

        #endregion

        #region E_WideValues...

        private static readonly double[][] E_WideValues =
        {
            new double[] {-4.0, -4.0, +2.7592300932315563, +0.7703665438412894},
            new double[] {-4.0, -3.0, +2.7089880779519609, +0.5902148402606944},
            new double[] {-4.0, -2.0, +2.6695039413758290, +0.4002869713632538},
            new double[] {-4.0, -1.0, +2.6440229722928948, +0.2024144366513133},
            new double[] {-4.0, +0.0, +2.6351835815956300, +0.0},
            new double[] {-4.0, +1.0, +2.6440229722928948, -0.2024144366513133},
            new double[] {-4.0, +2.0, +2.6695039413758290, -0.4002869713632538},
            new double[] {-4.0, +3.0, +2.7089880779519609, -0.5902148402606944},
            new double[] {-4.0, +4.0, +2.7592300932315563, -0.7703665438412894},

            new double[] {-3.0, -4.0, +2.5804237855343377, +0.8306096791000413},
            new double[] {-3.0, -3.0, +2.5182432481519188, +0.6411748226469675},
            new double[] {-3.0, -2.0, +2.4676840097206460, +0.4379503420256452},
            new double[] {-3.0, -1.0, +2.4340201249640832, +0.2226429579112416},
            new double[] {-3.0, +0.0, +2.4221120551369190, +0.0},
            new double[] {-3.0, +1.0, +2.4340201249640832, -0.2226429579112416},
            new double[] {-3.0, +2.0, +2.4676840097206460, -0.4379503420256452},
            new double[] {-3.0, +3.0, +2.5182432481519188, -0.6411748226469675},
            new double[] {-3.0, +4.0, +2.5804237855343377, -0.8306096791000413},

            new double[] {-2.0, -4.0, +2.3944996611140685, +0.9044817989396594},
            new double[] {-2.0, -3.0, +2.3160766927950868, +0.7062530828742627},
            new double[] {-2.0, -2.0, +2.2489412537310457, +0.4882460107150485},
            new double[] {-2.0, -1.0, +2.2017654714376550, +0.2507200059242914},
            new double[] {-2.0, +0.0, +2.1844381427462011, +0.0},
            new double[] {-2.0, +1.0, +2.2017654714376550, -0.2507200059242914},
            new double[] {-2.0, +2.0, +2.2489412537310457, -0.4882460107150485},
            new double[] {-2.0, +3.0, +2.3160766927950868, -0.7062530828742627},
            new double[] {-2.0, +4.0, +2.3944996611140685, -0.9044817989396594},

            new double[] {-1.0, -4.0, +2.2033310007226731, +0.9958997684570763},
            new double[] {-1.0, -3.0, +2.1031825291802033, +0.7914682380748731},
            new double[] {-1.0, -2.0, +2.0106193486878255, +0.5591118186050903},
            new double[] {-1.0, -1.0, +1.9388139207507618, +0.2934621483557033},
            new double[] {-1.0, +0.0, +1.9100988945138560, +0.0},
            new double[] {-1.0, +1.0, +1.9388139207507618, -0.2934621483557033},
            new double[] {-1.0, +2.0, +2.0106193486878255, -0.5591118186050903},
            new double[] {-1.0, +3.0, +2.1031825291802033, -0.7914682380748731},
            new double[] {-1.0, +4.0, +2.2033310007226731, -0.9958997684570763},

            new double[] {+0.0, -4.0, +2.0110830891830336, +1.1087868101716319},
            new double[] {+0.0, -3.0, +1.8838500585355470, +0.9045371224447711},
            new double[] {+0.0, -2.0, +1.7535922606158783, +0.6646684505199279},
            new double[] {+0.0, -1.0, +1.6324117814404261, +0.3692194923754990},
            new double[] {+0.0, +0.0, +1.5707963267948966, +0.0},
            new double[] {+0.0, +1.0, +1.6324117814404261, -0.3692194923754990},
            new double[] {+0.0, +2.0, +1.7535922606158783, -0.6646684505199279},
            new double[] {+0.0, +3.0, +1.8838500585355470, -0.9045371224447711},
            new double[] {+0.0, +4.0, +2.0110830891830336, -1.1087868101716319},

            new double[] {+1.0, -4.0, +1.8246204667608361, +1.2452957949664852},
            new double[] {+1.0, -3.0, +1.6686493646874265, +1.0517887129414584},
            new double[] {+1.0, -2.0, +1.4924861306380377, +0.8236285270148035},
            new double[] {+1.0, -1.0, +1.2838409578982445, +0.5317843366915186},
            //new double[] {+1.0, +0.0, +1.0,                +0.0},
            new double[] {+1.0, +1.0, +1.2838409578982445, -0.5317843366915186},
            new double[] {+1.0, +2.0, +1.4924861306380377, -0.8236285270148035},
            new double[] {+1.0, +3.0, +1.6686493646874265, -1.0517887129414584},
            new double[] {+1.0, +4.0, +1.8246204667608361, -1.2452957949664852},

            new double[] {+2.0, -4.0, +1.6520572177300490, +1.4036439716681998},
            new double[] {+2.0, -3.0, +1.4727971449586283, +1.2316047839359874},
            new double[] {+2.0, -2.0, +1.2612047205054806, +1.0382722694723662},
            new double[] {+2.0, -1.0, +0.9910526013280690, +0.8187942139560900},
            new double[] {+2.0, +0.0, +0.5990701173677961, +0.5990701173677961},
            new double[] {+2.0, +1.0, +0.9910526013280690, -0.8187942139560900},
            new double[] {+2.0, +2.0, +1.2612047205054806, -1.0382722694723662},
            new double[] {+2.0, +3.0, +1.4727971449586283, -1.2316047839359874},
            new double[] {+2.0, +4.0, +1.6520572177300490, -1.4036439716681998},

            new double[] {+3.0, -4.0, +1.4995535209333469, +1.5778790079127582},
            new double[] {+3.0, -3.0, +1.3072929826036153, +1.4324570559878374},
            new double[] {+3.0, -2.0, +1.0824066008629950, +1.2807302210060074},
            new double[] {+3.0, -1.0, +0.8097172917744630, +1.1316009530417886},
            new double[] {+3.0, +0.0, +0.4752239353510171, +1.0130180585994313},
            new double[] {+3.0, +1.0, +0.8097172917744630, -1.1316009530417886},
            new double[] {+3.0, +2.0, +1.0824066008629950, -1.2807302210060074},
            new double[] {+3.0, +3.0, +1.3072929826036153, -1.4324570559878374},
            new double[] {+3.0, +4.0, +1.4995535209333469, -1.5778790079127582},

            new double[] {+4.0, -4.0, +1.3691844319648812, +1.7604172084429570},
            new double[] {+4.0, -3.0, +1.1734254509660072, +1.6405682174682772},
            new double[] {+4.0, -2.0, +0.9507248613878454, +1.5236890478275993},
            new double[] {+4.0, -1.0, +0.6952137749095146, +1.4193247961033914},
            new double[] {+4.0, +0.0, +0.4062988864599602, +1.3438542313870974},
            new double[] {+4.0, +1.0, +0.6952137749095146, -1.4193247961033914},
            new double[] {+4.0, +2.0, +0.9507248613878454, -1.5236890478275993},
            new double[] {+4.0, +3.0, +1.1734254509660072, -1.6405682174682772},
            new double[] {+4.0, +4.0, +1.3691844319648812, -1.7604172084429570},

            
        };

        #endregion

        #region JacobiSN_Values

        private static readonly double[][] SN_Values =
        {
            //new double[] {-4.0, -4.0, +0.9226456659702936, -0.1931692873996115},

            new double[] {0.51884, 2.9696, 1.6163, -1.737,       0.5904042482562915,  0.2701969466834309},
            new double[] {-0.4642, -0.74241, -1.3325, -3.4424,  -0.2878703003953116, -0.4256243499287333},
            new double[] {-2.5054, 2.7322, -3.8454, 1.6401,     -0.0213547668028777, -0.0560940349261536},
            new double[] {1.9631, -1.3195, 2.0376, 1.6454,      -0.1060823285986597,  0.5110974998434139},
            new double[] {2.8114, 0.28341, 1.2377, 1.9352,      -0.7309803535881583,  0.5799089350790940},
            new double[] {-1.4041, -0.76869, -1.5667, 1.4645,   -0.9414428334320158,  0.5785800371789658},
            new double[] {1.0744, -3.2558, -1.3843, -3.4903,    -0.6134924965069380, -0.1613447992498137},
            new double[] {3.4318, 1.1273, 0.10878, 2.483,       -0.9798159856498453,  0.0217583199681255},
            new double[] {-0.74485, 3.9235, 5.8967, -1.4473,    -0.3950396809752283,  0.0348401420141661},
            new double[] {-0.77622, 1.4645, -1.4115, -1.8291,    1.7465488149816220, -0.6922330979801313},
            new double[] {0.59547, -1.8571, 1.1433, -0.23808,    1.3134846542097847,  0.8408291622505532},
            new double[] {-1.9063, 3.6193, -2.4291, 3.1871,     -0.0256153901102475,  0.5158796263870473},
            new double[] {3.392, -1.1276, -0.76138, -1.484,     -1.2530314781304371,  0.2964120659992171},
            new double[] {-0.59867, 4.6045, 0.32384, -3.2861,    0.7471247961010219,  1.2957290239053219},
            new double[] {-0.70697, -2.0975, 0.49047, -0.89166, -1.0520626397896832, -0.1434426475669969},
            new double[] {4.0216, -2.1948, -1.4138, 2.1493,     -0.0639004140111691, -0.8285134469129856},
            new double[] {-4.2277, -0.57131, -6.1252, -0.39165,  0.1116489360673780, -1.1491158557439022},

            new double[] {-2.8996, -1.7471, -5.0601, -3.4198,    0.4840985298394761, -0.4627236477701964},
            new double[] {-4.4041, -4.5996, -3.6429, 5.3908,    -0.7648080322751002,  0.3318109170945521},
            new double[] {4.5348, -0.25964, -5.0607, -3.4879,    1.7778888257532164,  1.1874188939977641},
            new double[] {1.6481, -2.4168, 1.4735, 0.098811,     0.8739940132627293, -0.0229546755138366},
            new double[] {-2.0521, 2.4866, 4.7311, 0.78705,      0.4967493472208149, -0.0791867442184052},
            new double[] {0.24539, 0.60909, 1.4718, -6.0134,     0.3912110813222166,  0.3448321714213219},
            new double[] {-5.1079, 3.0495, 0.28787, 2.1139,     -0.1339951269138146, -1.0871902928930668},
            new double[] {0.31233, 1.9319, 3.3495, -1.9423,      0.5818055467626294, -0.0360105824180628},
            new double[] {3.0464, -0.12475, 3.5226, -1.6294,    -1.2547811104550785, -0.5477403848054309},
            new double[] {-2.2325, -0.68617, 2.9313, 2.7124,     0.6718425509230812, -0.5343907369695872},
            new double[] {4.2929, -0.49552, 2.012, 0.4788,      -0.5996038315180190,  0.1749389633738669},
            new double[] {-0.21409, -2.0623, 1.7063, -1.0401,   -0.7499596348958714,  0.3372669239139732},
            new double[] {-0.98572, 0.61073, -2.4567, -0.35624, -1.8057132804447074,  0.5317490878705340},
            new double[] {1.8426, -2.3206, -6.4677, -0.3523,    -0.1157612645012850, -0.0883781166886617},
            new double[] {2.8252, -2.8581, -1.7934, 5.7711,     -0.8933807146836327, -0.0613321906468595},
            new double[] {-4.1129, -2.1153, -0.8806, 0.78175,   -0.3459898431007929, -1.0963368341344065},
            new double[] {-0.055792, -6.73, -1.1968, 2.3502,     1.3820929672929049, -0.7206525489280350},
            new double[] {0.060937, -3.8852, -1.0884, -5.7173,   0.6529163419619607,  0.0474782102664632},
            new double[] {1.5342, -0.82911, -4.6552, 4.4875,    -0.8140875719195246,  0.0408705184674200},
             
            new double[] {-0.51966, -2.3266, 1.1472, -1.578,    -0.9269262346469677, -0.0727650501428693},
            new double[] {5.5771, 0.34506, -0.8464, -0.96523,    0.3706760431164086,  0.7882994654237900},
            new double[] {0.40154, 0.73103, -0.80694, 0.1994,    0.4049531917876222,  0.7847347405661588},
            new double[] {-5.2011, -1.4554, -2.034, -1.5004,     0.1951357294250087,  0.2782936197075804},
            new double[] {-2.1682, -3.9813, -0.31167, 2.7602,    0.0888613789268869,  0.5151195629135316},
            new double[] {3.5843, -0.72041, -2.6838, 1.6356,     1.6329291635786901, -0.3755001087261202},
            new double[] {-1.7575, -2.5675, 1.5384, 1.597,      -0.8201508023141739,  0.1981083256018297},
            new double[] {2.8833, -1.6027, -1.1431, 5.7989,      0.5988958359957328,  0.2346800752340524},
            new double[] {2.2567, 4.867, 4.6112, -0.59431,      -0.7148263819422689,  0.0841352818012224},
            new double[] {1.8267, 2.1128, -2.4009, 2.4857,       0.3061639866889533,  0.2273668597844990},
            new double[] {2.4739, -3.9952, -0.28193, -1.5946,    0.8542439070247735,  1.2460337650315692},
            new double[] {-0.43909, -2.2546, -4.2305, -0.85033,  -0.0301003836022761,  0.5349828081676795},
            new double[] {-0.079954, 1.7509, -3.6207, 5.8094,    0.1711276771535256, -2.4324275446236865},
            new double[] {1.2571, 0.026338, -7.3444, -0.54917,   0.5617264971365928, -0.0852656599794157},
            new double[] {-0.15456, 0.96257, 2.9899, -2.4781,    0.7484771529453407,  3.8433109862647318},
            new double[] {1.4584, -1.2188, 0.24417, 1.6115,      0.2142840939164182, -0.6020602436539698},
            new double[] {-1.0022, 3.7168, -1.0247, 0.7984,      0.2522506095966247, -0.7938298980543172},
            new double[] {-1.8307, -3.7039, 4.4231, 1.2966,     -0.0508744659345719, -0.1788986617891857},
            new double[] {-0.50668, 1.7062, -2.2515, -1.407,     0.9483213098220693,  0.0870797001254079}, 

            //55
            
            new double[] {-0.2637, 1.0366, 0.0093098, -4.8988,   1.8972034737408889,  0.6461099844842149},
            new double[] {1.2958, -3.7231, 0.53017, 5.2956,      0.2432727047834525,  0.0315466579759659},
            new double[] {0.72934, -0.45221, -4.1923, -0.34821,  1.0208241642889220, -0.7754649743791535},
            new double[] {1.7486, 1.7223, 0.34313, -4.2138,     -0.3254175453409664, -0.3327369237149366},
            new double[] {1.9573, -3.9533, -0.95808, -2.9808,   -0.6300189400574857,  0.1777006003110236},
            new double[] {6.2371, -2.1177, 1.1477, 0.4725,      -0.4208534158726762,  0.5344122460752836},
            new double[] {1.6908, -1.821, -0.15396, -7.1828,     0.9499529979993903,  0.1640319321360216},
            new double[] {-2.0776, 0.012671, 4.2839, -1.5105,    0.5518641008898748, -0.1163864711407930},
            new double[] {8.1582, 0.43575, 8.0114, 3.1815,      -0.4623924243840385, -0.1115151433747305},
            new double[] {1.237, -0.12197, -3.6635, 3.9543,      1.2878364062468114,  0.7821429961197959},
            new double[] {-0.96443, -0.56857, 0.31232, -1.16,   -0.7597108010481192, -0.4214993674679742},
            new double[] {-0.60091, 6.5271, -1.319, -1.8344,    -0.8317561100031516,  0.9793938649081955},
            new double[] {-3.1134, -2.3986, -0.645, 3.7016,     -0.0527379994729049, -0.3520628632888526},
            new double[] {2.3259, 0.86088, -2.2341, -1.2529,    -0.2110869860547066, -0.5734656192766448},
            new double[] {2.7895, -4.0373, -2.0195, -3.0925,     0.0039127457157222, -0.2092329426573289},
            new double[] {0.085197, -0.34575, -1.9436, -2.0393,  0.0674095254857922, -0.3509642725376925},
            new double[] {0.10603, 4.3921, 0.84231, -0.70556,    1.1461987062242048,  0.4801439067111590},
            new double[] {-0.76931, -3.6252, 1.1142, 5.5632,     0.7459631188724139, -0.3592604363402452},
            new double[] {1.2792, -1.3633, -0.45378, 2.4106,    -0.1872307392960212, -0.2461983977335170},
            new double[] {0.66703, -3.9449, -2.6263, 1.668,      0.0356270806271835, -0.6625607153699960},
            new double[] {-1.5311, -2.3284, 0.35369, -0.2923,   -1.2232052660711278, -0.4238903714639346},

            new double[] {-0.26425, -2.7057, -0.66402, 2.007,    0.9866799874353029, -0.5113203298708776},
            new double[] {-1.6117, -1.6544, 2.4188, -3.0095,     0.7764679317379035,  0.6898189358708989},
            new double[] {2.0092, -3.3006, 0.6498, -3.8894,      0.4942975835396195,  0.4769319042496746},
            new double[] {-2.7114, 1.2708, -1.6939, -0.25168,   -0.1754451443272037, -0.8803173264431467},
            new double[] {3.9241, -0.056073, 2.6377, -3.6035,    0.4240815079702533,  0.2091610327585381},
            new double[] {-1.2392, -2.7944, -1.6822, -0.8531,    0.6496560195879301,  1.1094381863018067},
            new double[] {-0.77461, -5.1859, 0.70602, -0.47599, -1.0911165980851063, -0.1636715276055846},
            new double[] {-2.4444, -2.9592, -0.055552, 0.49778, -0.9412622059618866,  0.4526552861052635}, 
            new double[] {1.5054, 2.5217, -1.5462, -1.8433,     -0.3718932451931742, -0.8439041606785837},
            new double[] {3.6996, -3.2272, 0.38114, 5.0978,     -0.4607827591334515,  0.4312504234848461},
            new double[] {0.40129, -0.55535, 1.1017, 3.3922,     0.3987850450884624, -0.3574826523783546},
            new double[] {1.5426, 2.6467, 2.2014, 2.1921,        0.8788087293844185, -0.0800586758911246},
            new double[] {-0.46821, 0.64862, 2.24, 0.50043,     -0.6567693841693364,  0.4414540381927468},
            new double[] {-4.6262, 3.7656, -1.2415, -1.0497,    -0.1489934594737862, -1.2001269902015487},
            new double[] {3.8101, 0.58841, -3.5347, 0.5149,     -0.2576757435983988,  0.4765400956825414},
            new double[] {2.9978, 3.6309, 1.7695, -1.0864,      -0.6908604415031601, -0.1647036232278390},
            new double[] {0.11969, 0.92434, 1.8318, 4.601,      -1.3888232679296806,  1.2279301092504240},
            new double[] {-2.2738, -2.6237, -2.9983, 2.1055,    -0.1148525608541707, -2.4597653366721075},
            new double[] {2.7136, 1.5111, -1.3321, 1.671,        0.5903603182374138, -1.3944471387974824},
            new double[] {6.3199, -2.4098, -1.834, -0.28422,    -0.6995918558917249, -0.1575595227043095},
            new double[] {-1.1247, 6.2212, -2.2764, 1.8201,      0.9130032698194003, -0.6357778500271393},
            new double[] {3.1529, 1.3546, 3.4171, -1.5772,      -0.3103045807566037,  0.5781773299245945},
            new double[] {-0.35512, 3.332, 0.3064, -1.4655,      0.5778014278229897,  0.4394031108155883},

        };

        #endregion

        #region JacobiCD_Values

        private static readonly double[][] CD_Values =
        {
            new double[] { 3.9547, 3.8106, 1.6169, -0.2695,       -0.9902199958282163, -0.8442860026135152},
            new double[] { 2.1473, 3.7373, -3.5996, -2.3096,       0.0220706571136785, -0.3181241322343809},
            new double[] { 1.2892, 0.3784, -5.3111, -4.866,       -0.0947265483397675, -0.4207723558190300},
            new double[] { 1.0025, 0.77548, -0.063411, 3.49,       0.0861255537493131, -0.3567788188167866},
            new double[] { 4.283, -3.1536, 1.5969, -2.212,         1.2363403162433346, +0.6116797163619901},
            new double[] { -1.0041, 2.9571, 3.3466, 0.86136,      -0.5648719768041186, -0.5007307130148763},
            new double[] { 0.90887, -0.85111, 1.0152, 0.051322,    1.0332432063914670, -0.0309046162974794},
            new double[] { -1.5227, 0.93085, 0.52977, 1.8318,     -1.0794356823707509, +0.4313480572706540},
            new double[] { -1.5754, -2.0615, -0.52344, 4.4589,     0.5275445874954586, +0.1810805501709501},
            new double[] { 0.50708, -3.7664, 0.60687, 5.4705,      0.5204702531633918, +0.4339830805848432},
            new double[] { -2.1559, -0.50691, -1.3445, 0.61289,   -1.0318985119456956, -0.2724105631435924},
            new double[] { 3.379, 3.2379, -0.78485, -4.1004,      -0.3025305728560815, -0.0735537038448368},
            new double[] { 2.2306, -1.6261, -2.1762, -1.9499,      0.5997366344617684, -0.7398890573246665},
            new double[] { 2.3489, -2.3764, -0.54678, 2.8681,      0.6967462205734298, -0.3392245264878919},
            new double[] { 1.5855, -0.45295, -1.7494, 1.0869,     -0.3339727412301711, +0.5548775697017649},
            new double[] { 3.0152, 2.3331, -1.2053, 2.9682,       -0.6270846627363877, +0.1214830763388133},
            new double[] { -1.5722, 1.9975, 2.7142, 0.27569,      -0.8040950832151537, +0.3624074848024428},
            new double[] { -0.83912, -0.43666, 0.26808, 4.3285,    0.1479276834042779, -0.0032854746798876},
            new double[] { 2.3994, -2.3038, -0.9512, -1.6643,      0.3647508758552404, -0.3535459260569660},
            new double[] { -0.91362, 0.54864, -4.7519, -4.269,     0.0212555968422078, +0.3416964384390107},
            new double[] { -0.6151, 3.2335, 0.38899, -2.0581,      1.6040180590295394, +1.0344056525405554},
            new double[] { -0.33976, -1.6855, -0.43796, -0.66765, -1.7990053239806458, +2.7447775474846057},
            new double[] { -0.040177, -0.036133, -2.7579, 1.3136,  0.9975002712410043, -0.0052338804043784},
            new double[] { 2.1969, -0.65666, -0.69133, 0.11702,   -0.9288837521970291, +0.6520241707014946},
             
            new double[] { 1.5407, -1.1755, -2.0406, 0.73753,      0.0254154678403671, +0.6209996939731318},
            new double[] { -0.12129, 0.031855, -3.1046, 3.7377,    0.9851344104454549, +0.0407034099545538},
            new double[] { 1.054, 3.0337, 0.57714, 1.1152,         0.9630770452348291, +0.0035242132610554},
            new double[] { -3.9329, 1.5858, -2.9685, 1.5573,      -0.3709623149041780, +0.3960893453234779},
            new double[] { 5.4073, 4.0472, -2.7884, -3.5126,       0.0425071574523683, -0.5893295188899218},
            new double[] { 0.71206, -1.0853, -1.1093, 0.38319,     0.1047920786250447, +1.5907234982063230},
            new double[] { 0.34164, -2.2014, 0.78635, -1.4128,     0.7607440787326188, +0.0918574136060697},
            new double[] { -1.2821, -4.8067, 3.1126, 2.8222,       0.5184184357509517, -0.0260692992835491},
            new double[] { -1.422, -0.64394, -2.3535, -2.1722,    -0.1947643802839902, -0.5251353515719144},
            new double[] { -1.5578, 3.9822, 0.41531, -0.26738,     0.6082693110251333, +0.0821569635866525},
            new double[] { -3.6258, -3.2041, 2.3504, 3.8156,       0.3869338801457598, -0.5995842699777497},
            new double[] { 2.8402, 0.52952, 1.9184, -0.93088,     -0.9562588365397019, +0.2171507763767001},
            new double[] { 2.6164, -1.2932, -0.90857, -2.2923,    -0.6511199556594587, -0.5211352008581883},
            new double[] { -2.1396, 4.7524, -3.1101, 1.8281,       0.0126510332510220, -0.3064212955808049},
            new double[] { 0.6591, 0.86222, -3.4867, -1.9089,     -0.5331186334139454, -0.7635200681569170},
            new double[] { 2.4014, 0.93243, -0.42979, 0.57579,    -1.3730143680906723, -0.4114717687178585},
            new double[] { 3.6847, -2.8989, -1.0953, -2.5486,     -0.9737644328106114, -0.0545477796108698},
            new double[] { 3.5448, -0.17112, -2.3609, -3.2742,     0.2895916400183943, +0.4831257044561854},
            new double[] { -0.048577, -3.0665, -0.9389, 0.4736,   -0.8196771623473402, +0.4059968102353002},
            new double[] { 0.33084, 2.1395, -1.9739, 2.3854,      -0.1130721602674444, +0.3327489072221806},
            new double[] { -0.49206, 0.77041, -0.34825, 2.0122,    4.9005130848855955, -0.2516075215388142},
            new double[] { -2.5411, 1.2665, -3.0794, -1.1859,      0.2269360362988345, -0.7268919777803592},
            new double[] { -2.1374, 0.7616, 2.1861, 0.66083,      -0.9327498832426070, -0.0355021992141928},
            new double[] { 5.5684, -4.0424, -2.391, 0.24134,       0.2039043611922956, +0.4595440261437762},
            new double[] { 2.1058, -1.1629, -1.7886, -0.70003,     0.4861675903680669, +6.7405739719054187},

            new double[] { 5.1125, 0.2733, -4.9717, 1.4454,       -0.4016571369797038, +0.0974311565272092},
            new double[] { -1.166, 3.4609, -4.384, 0.80499,       -0.0365088559201354, +0.4860177782186465},
            new double[] { -2.6983, 5.9878, -4.0567, 0.94424,     -1.2468653642231604, -0.1514987677904168},
            new double[] { 3.5307, 2.597, 1.9136, -4.2487,        -1.0047969176150093, +0.0102397175707716},
            new double[] { 4.6675, -0.31708, -0.58209, -0.88806,   0.6125762013107310, +0.2364347442581325},
            new double[] { 1.6369, -4.5094, 1.7806, -0.45961,      0.0253393980031986, +1.0334612358319980},
            new double[] { 0.62261, -2.7455, 4.8205, 0.5319,       0.0486870450521506, -0.4021065648252659},
            new double[] { -1.0232, 0.71544, -0.1777, 0.31522,     0.6070266092827431, +0.8838482580381934},
            new double[] { -0.95267, 0.53459, -2.8681, 0.56109,    0.0610082916500727, +0.5334775025547916},
            new double[] { -2.1033, 0.87339, 2.949, -0.066709,    -0.6213359445378686, +0.0164780270224632},
            new double[] { 0.67442, 2.5307, 1.5123, -2.7521,      -0.6845320226149671, -0.5259933460423611},
            new double[] { 0.065093, 1.0293, 5.03, -4.0668,        0.2891778043810439, +0.0997697984000451},
            new double[] { -3.6329, 2.0067, 0.84466, 1.3642,       0.6392276441702547, -0.8625479609474467},
            new double[] { -5.5839, -0.25682, 0.14473, 2.404,     -0.9433507850334093, -0.2738722218362792},
            new double[] { -0.48273, -4.1595, 0.82943, 2.4458,    -0.0516687601818523, -0.0231502069200104},
            new double[] { -2.6353, -0.090116, -5.4443, -5.9687,   0.1933957155257660, +0.2887786087084287},
            new double[] { 3.9142, -2.3328, -3.3917, 1.1934,       0.2497498044430599, +0.5989290918229202},
            new double[] { -0.028689, -0.20052, 1.3197, -0.89392,  0.9984815097958878, +0.0191411614508630},
            new double[] { 0.94497, 0.12129, -0.59072, 1.8781,     0.2824263474648280, +0.1769294381656560},
            new double[] { -2.488, 0.82663, -2.1931, 1.8842,       1.7324312401588266, +0.3802851243316301},

            new double[] { -2.5811, 0.78399, -1.0806, 2.9994,      0.7827468367853972, +0.2875903752107105},
            new double[] { -2.2101, -3.3653, 0.92416, -1.0681,    -0.7241661951216276, -0.3121877875431717},
            new double[] { 1.2286, 0.80431, -1.261, 5.6636,       -0.4024155702976099, -0.6607514969412160},
            new double[] { 2.1923, -2.7866, -0.3279, -0.49041,     1.2698799705891116, -0.2571269192192633},
            new double[] { 1.2043, 0.030657, -0.58763, -7.7159,   -0.2452084542662628, -0.2639767161478842},
            new double[] { 0.50744, -1.091, 3.0244, 1.448,         0.2576091420898680, -0.2506930650917964},
            new double[] { -1.6073, -0.32837, -0.36997, -1.5424,  -0.3492021428785164, -0.5346108273421930},
            new double[] { -2.9963, 5.2393, -2.0822, -1.3324,     -1.0185861727479749, -0.9275897311115892},
            new double[] { -0.15575, 1.9281, -2.9325, -1.2509,    -0.6422506977034612, -0.2849315052906446},
            new double[] { 0.16504, -4.339, 0.34121, 4.2954,      -0.0254478765470488, +0.2510682795128357},
            new double[] { -1.6482, 5.5593, -2.5943, -1.4288,      0.4831188958353860, +0.2470149195946047},
            new double[] { 1.9644, -0.61938, 6.1692, -1.3649,     -0.0391637693870092, +0.0887812129902637},
            new double[] { -2.621, -2.0985, 1.4711, 1.6153,       -0.7987540525630231, +0.2382074786638817},
            new double[] { 3.2093, 0.98789, -2.3673, -2.0277,      0.5336771786208845, +0.1449802884459502},
            new double[] { -4.0203, -1.9169, 1.9577, 0.13202,      0.0257576429946565, +1.1828350151174205},
            new double[] { -0.90009, -0.16965, 4.5503, 2.921,     -0.3049030795826029, +0.7445148826130818},
            new double[] { 1.7118, 0.38614, -0.10697, -3.6959,    -0.3223643306431645, -0.3388846872030990},
            new double[] { 1.8491, 2.1714, -3.6159, -1.8802,      -0.0350159582342155, +0.6083052846267469},
            new double[] { -1.0902, -2.7663, -1.7455, -2.3688,     1.5345749724535197, -0.4468432019594323},
            new double[] { -1.643, -3.7521, -0.57005, 2.5854,      0.2973407679143666, -0.3305438091869695},
            new double[] { -2.2337, -0.72495, 0.9298, -1.1227,    -0.9270430970241778, -0.3400154715679183},
            new double[] { -1.9911, -1.341, 2.218, -0.71833,      -0.6783720936058978, -0.0255300979019382},
            new double[] { 0.81587, 3.388, 3.3964, 0.66717,        0.2717056489395699, -0.1056765498340171},
            new double[] { 0.25805, -3.1399, -4.0634, -0.36437,    0.7142549969329763, +0.2410918583435533},
            new double[] { 3.0646, -0.12721, -1.397, -0.89317,    -0.6382700429742053, +0.2184225523571290},
            new double[] { -5.7843, 1.455, -1.5515, -1.8487,      -0.0393568028015753, +0.4249029725459207},
            new double[] { -0.40796, 3.4286, 0.78125, -2.8847,    -0.2552433353962046, +0.7045891283884268},
            new double[] { -4.8022, -5.5393, 0.41506, 2.0006,     -1.3466633332602412, -0.0633033952456908},
            new double[] { -0.84191, -1.5475, 0.80247, 2.081,      0.7137405939654924, -0.5115466038935862},
            new double[] { -1.0154, -3.0139, 1.9527, -0.21322,     1.2733209454198937, +1.5103883555343768},

        };

        #endregion



        #region Testing Precomputed Values

        [Test]
        public void KTest_WideValues([Range(0, 79)] int index)
        {
            double[] vals = K_WideValues[index];
            Cmplx a = new Cmplx(vals[0], vals[1]);
            Cmplx b = new Cmplx(vals[2], vals[3]);

            Cmplx res = Jacobi.K(a);

            Assert.That(res, Ist.WithinTolOf(b, tol));
        }

        [Test]
        public void ETest_WideValues([Range(0, 79)] int index)
        {
            double[] vals = E_WideValues[index];
            Cmplx a = new Cmplx(vals[0], vals[1]);
            Cmplx b = new Cmplx(vals[2], vals[3]);

            Cmplx res = Jacobi.E(a);

            Assert.That(res, Ist.WithinTolOf(b, tol));
        }

        [Test]
        public void SN_Test_PreValues([Range(0, 98)] int index)
        {
            double[] vals = SN_Values[index];
            Cmplx a = new Cmplx(vals[0], vals[1]);
            Cmplx b = new Cmplx(vals[2], vals[3]);
            Cmplx c = new Cmplx(vals[4], vals[5]);

            Cmplx res = Jacobi.SN(a, b);

            Assert.That(res, Ist.WithinTolOf(c, tol));
        }

        [Test]
        public void CD_Test_PreValues([Range(0, 98)] int index)
        {
            double[] vals = CD_Values[index];
            Cmplx a = new Cmplx(vals[0], vals[1]);
            Cmplx b = new Cmplx(vals[2], vals[3]);
            Cmplx c = new Cmplx(vals[4], vals[5]);

            Cmplx cn = Jacobi.CN(a, b);
            Cmplx dn = Jacobi.DN(a, b);
            Cmplx res = cn / dn;

            Assert.That(res, Ist.WithinTolOf(c, tol));
        }

        #endregion

        #region KE Legendre Tests

        //[Test]
        //public void K_WeirdInversion_Cmplx([Range(1, NumTests)] int index)
        //{
        //    VRandom rng = Help.GetRNG(index, 0x0cb68252);

        //    Cmplx m = rng.RandCmplx(2.5);
        //    Cmplx k = Jacobi.K(m);

        //    Cmplx p1 = 1.0 - k;
        //    Cmplx p2 = Cmplx.Sqrt(1.0 - m);
        //    p2 = Jacobi.K(p2);

        //    Console.WriteLine("Jacobi.K({0:G5}) = {1:G5}", m, k);

        //    Assert.That(p2, Ist.WithinTolOf(p1, VTOL)); 
        //}

        [Test]
        public void KE_LegendreTest1_Cmplx([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x1c234ffe);

            Cmplx m = rng.RandCmplx(2.5);
            Cmplx p = 1.0 - m; // Cmplx.Sqrt(1.0 - m);

            Cmplx km = Jacobi.K(m);
            Cmplx kp = Jacobi.K(p);
            Cmplx em = Jacobi.E(m);
            Cmplx ep = Jacobi.E(p);

            Cmplx x1 = (km * ep) + (em * kp);
            Cmplx x2 = (km * kp) + 1.57079632679489661923;

            Assert.That(x1, Ist.WithinTolOf(x2, VTOL));
        }

        //[Test]
        //public void KE_LegendreTest2_Cmplx([Range(1, NumTests)] int index)
        //{
        //    VRandom rng = Help.GetRNG(index, 0x5b4a0a9d);

        //    Cmplx m = rng.RandCmplx(2.5);
        //    //Cmplx p = Cmplx.Sqrt(1.0 - m);

        //    Cmplx km = Jacobi.K(m);
        //    Cmplx kp = 1.0 - km;
        //    Cmplx em = Jacobi.E(m);
        //    Cmplx ep = 1.0 - em;

        //    Cmplx x1 = (km * ep) + (em * kp);
        //    Cmplx x2 = (km * kp) + 1.57079632679489661923;

        //    Assert.That(x1, Ist.WithinTolOf(x2, VTOL));
        //}

        [Test]
        public void KE_LegendreTest1_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0xf684b756);

            double m = rng.RandDouble(0.0, 1.0);
            double p = 1.0 - m; // Cmplx.Sqrt(1.0 - m);

            double km = Jacobi.K(m);
            double kp = Jacobi.K(p);
            double em = Jacobi.E(m);
            double ep = Jacobi.E(p);

            double x1 = (km * ep) + (em * kp);
            double x2 = (km * kp) + 1.57079632679489661923;

            Assert.That(x1, Ist.WithinTolOf(x2, VTOL));
        }

        //[Test]
        //public void KE_LegendreTest2_Real([Range(1, NumTests)] int index)
        //{
        //    VRandom rng = Help.GetRNG(index, 0xec06230f);

        //    double m = rng.RandDouble(MinM, MaxM);
        //    //Cmplx p = Cmplx.Sqrt(1.0 - m);

        //    double km = Jacobi.K(m);
        //    double kp = 1.0 - km;
        //    double em = Jacobi.E(m);
        //    double ep = 1.0 - em;

        //    double x1 = (km * ep) + (em * kp);
        //    double x2 = (km * kp) + 1.57079632679489661923;

        //    Assert.That(x1, Ist.WithinTolOf(x2, VTOL));
        //}

        #endregion

        #region Eleptic Compatablity..

        [Test]
        public void F_Compatablity_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x76c47052);

            double a = rng.RandGauss(0.0, 2.5);
            double m = rng.RandDouble(MaxM, MinM);

            Cmplx b1 = Jacobi.F(a, m);
            Cmplx b2 = Jacobi.F((Cmplx)a, (Cmplx)m);

            Console.WriteLine("Jacobi.F({0:G5}, {1:G5}) = {2:G5}", a, m, b1);

            Assert.That(b1, Ist.WithinTolOf(b2, VTOL));
        }

        [Test]
        public void E2_Compatablity_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0xa4f59d4f);

            double a = rng.RandGauss(0.0, 2.5);
            double m = rng.RandDouble(MaxM, MinM);

            Cmplx b1 = Jacobi.E(a, m);
            Cmplx b2 = Jacobi.E((Cmplx)a, (Cmplx)m);

            Console.WriteLine("Jacobi.E({0:G5}, {1:G5}) = {2:G5}", a, m, b1);

            Assert.That(b1, Ist.WithinTolOf(b2, VTOL));
        }

        [Test]
        public void K_Compatablity_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0xf28b7d60);

            //double a = rng.RandGauss(0.0, 2.5);
            double m = rng.RandDouble(MaxM, MinM);

            Cmplx b1 = Jacobi.K(m);
            Cmplx b2 = Jacobi.K((Cmplx)m);

            Console.WriteLine("Jacobi.K({0:G5}) = {1:G5}", m, b1);

            Assert.That(b1, Ist.WithinTolOf(b2, VTOL));
        }

        [Test]
        public void E1_Compatablity_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x588335cd);

            //double a = rng.RandGauss(0.0, 2.5);
            double m = rng.RandDouble(MaxM, MinM);

            Cmplx b1 = Jacobi.E(m);
            Cmplx b2 = Jacobi.E((Cmplx)m);

            Console.WriteLine("Jacobi.E({0:G5}) = {1:G5}", m, b1);

            Assert.That(b1, Ist.WithinTolOf(b2, VTOL));
        }

        #endregion

        #region Jacobi Inversion

        [Test]
        public void JacobiSN_Inversion_Cmplx([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x0cb68252);

            Cmplx p = rng.RandCmplx(2.5);
            Cmplx m = rng.RandCmplx(2.5);
            Cmplx x1 = Cmplx.Sin(p);

            Cmplx u = Jacobi.F(p, m);
            Cmplx x2 = Jacobi.SN(u, m);

            Console.WriteLine("Jacobi.F({0:G5}, {1:G5}) = {2:G5}", p, m, u);

            Assert.That(x2, Ist.WithinTolOf(x1, VTOL));          
        }

        [Test]
        public void JacobiCN_Inversion_Cmplx([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x528387d0);

            Cmplx p = rng.RandCmplx(2.5);
            Cmplx m = rng.RandCmplx(2.5);
            Cmplx x1 = Cmplx.Cos(p);

            Cmplx u = Jacobi.F(p, m);
            Cmplx x2 = Jacobi.CN(u, m);

            Console.WriteLine("Jacobi.F({0:G5}, {1:G5}) = {2:G5}", p, m, u);

            Assert.That(x2, Ist.WithinTolOf(x1, VTOL));
        }

        [Test]
        public void JacobiSC_Inversion_Cmplx([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x9e4561fb);

            Cmplx p = rng.RandCmplx(2.5);
            Cmplx m = rng.RandCmplx(2.5);
            Cmplx x1 = Cmplx.Tan(p);

            Cmplx u = Jacobi.F(p, m);
            Cmplx x2 = Jacobi.SC(u, m);

            Console.WriteLine("Jacobi.F({0:G5}, {1:G5}) = {2:G5}", p, m, u);

            Assert.That(x2, Ist.WithinTolOf(x1, VTOL));
        }

        [Test]
        public void JacobiDN_Inversion_Cmplx([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0xfdb3d393);

            Cmplx p = rng.RandCmplx(2.5);
            Cmplx m = rng.RandCmplx(2.5);

            Cmplx u = Jacobi.F(p, m);
            Cmplx x2 = Jacobi.DN(u, m);

            Cmplx x1 = Cmplx.Sin(p);
            x1 = m * x1 * x1;
            x1 = Cmplx.Sqrt(1.0 - x1);

            Console.WriteLine("Jacobi.F({0:G5}, {1:G5}) = {2:G5}", p, m, u);

            Assert.That(x2, Ist.WithinTolOf(x1, VTOL));
        }

        [Test]
        public void JacobiSN_Inversion_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0xda0d2d4a);

            double p = rng.RandGauss(0.0, 2.5);
            double m = rng.RandDouble(MinM, MaxM);
            double x1 = Math.Sin(p);

            double u = Jacobi.F(p, m);
            double x2 = Jacobi.SN(u, m);

            Console.WriteLine("Jacobi.F({0:G5}, {1:G5}) = {2:G5}", p, m, u);

            Assert.That(x2, Ist.WithinTolOf(x1, VTOL));
        }

        [Test]
        public void JacobiCN_Inversion_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0xfb4d697b);

            double p = rng.RandGauss(0.0, 2.5);
            double m = rng.RandDouble(MinM, MaxM);
            double x1 = Math.Cos(p);

            double u = Jacobi.F(p, m);
            double x2 = Jacobi.CN(u, m);

            Console.WriteLine("Jacobi.F({0:G5}, {1:G5}) = {2:G5}", p, m, u);

            Assert.That(x2, Ist.WithinTolOf(x1, VTOL));
        }

        [Test]
        public void JacobiSC_Inversion_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0xab32017c);

            double p = rng.RandGauss(0.0, 2.5);
            double m = rng.RandDouble(MinM, MaxM);
            double x1 = Math.Tan(p);

            double u = Jacobi.F(p, m);
            double x2 = Jacobi.SC(u, m);

            Console.WriteLine("Jacobi.F({0:G5}, {1:G5}) = {2:G5}", p, m, u);

            Assert.That(x2, Ist.WithinTolOf(x1, VTOL));
        }

        [Test]
        public void JacobiDN_Inversion_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0xfed14f61);

            double p = rng.RandGauss(0.0, 2.5);
            double m = rng.RandDouble(MinM, MaxM);

            double u = Jacobi.F(p, m);
            double x2 = Jacobi.DN(u, m);

            double x1 = Math.Sin(p);
            x1 = m * x1 * x1;
            x1 = Math.Sqrt(1.0 - x1);

            Console.WriteLine("Jacobi.F({0:G5}, {1:G5}) = {2:G5}", p, m, u);

            Assert.That(x2, Ist.WithinTolOf(x1, VTOL));
        }

        #endregion

        #region Jacobi Compatablity      

        [Test]
        public void JacobiSN_Compatablity_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x6674312b);

            double a = rng.RandGauss(0.0, 2.5);
            double m = rng.RandDouble(ZeroM, MaxM);

            Cmplx b1 = Jacobi.SN(a, m);
            Cmplx b2 = Jacobi.SN((Cmplx)a, (Cmplx)m);

            Console.WriteLine("Jacobi.SN({0:G5}, {1:G5}) = {2:G5}", a, m, b1);

            Assert.That(b1, Ist.WithinTolOf(b2, VTOL));
        }

        [Test]
        public void JacobiCN_Compatablity_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0xcf0e4834);

            double a = rng.RandGauss(0.0, 2.5);
            double m = rng.RandDouble(ZeroM, MaxM);

            Cmplx b1 = Jacobi.CN(a, m);
            Cmplx b2 = Jacobi.CN((Cmplx)a, (Cmplx)m);

            Console.WriteLine("Jacobi.CN({0:G5}, {1:G5}) = {2:G5}", a, m, b1);

            Assert.That(b1, Ist.WithinTolOf(b2, VTOL));
        }

        [Test]
        public void JacobiDN_Compatablity_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x83bd2573);

            double a = rng.RandGauss(0.0, 2.5);
            double m = rng.RandDouble(ZeroM, MaxM);

            Cmplx b1 = Jacobi.DN(a, m);
            Cmplx b2 = Jacobi.DN((Cmplx)a, (Cmplx)m);

            Console.WriteLine("Jacobi.DN({0:G5}, {1:G5}) = {2:G5}", a, m, b1);

            Assert.That(b1, Ist.WithinTolOf(b2, VTOL));
        }

        [Test]
        public void JacobiSC_Compatablity_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x7939ec4f);

            double a = rng.RandGauss(0.0, 2.5);
            double m = rng.RandDouble(ZeroM, MaxM);

            Cmplx b1 = Jacobi.SC(a, m);
            Cmplx b2 = Jacobi.SC((Cmplx)a, (Cmplx)m);

            Console.WriteLine("Jacobi.SC({0:G5}, {1:G5}) = {2:G5}", a, m, b1);

            Assert.That(b1, Ist.WithinTolOf(b2, VTOL));
        }

        #endregion

        #region Imaginary Transform

        [Test]
        public void JacobiCN_ImaginaryTransform([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0xa8fbfc11);

            Cmplx u = rng.RandCmplx(2.5);
            Cmplx m = rng.RandCmplx(2.5);

            Cmplx x1 = Jacobi.CN(u, m);
            Cmplx x2 = 1.0 / Jacobi.CN(u.MultI(), 1.0 - m);

            Console.WriteLine("Jacobi.CN({0:G5}, {1:G5}) = {2:G5}", u, m, x1);

            Assert.That(x1, Ist.WithinTolOf(x2, VTOL));
        }

        [Test]
        public void JacobiSN_ImaginaryTransform([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x43ae1e75);

            Cmplx u = rng.RandCmplx(2.5);
            Cmplx m = rng.RandCmplx(2.5);

            Cmplx x1 = Jacobi.SN(u, m);
            Cmplx x2 = -Jacobi.SC(u.MultI(), 1.0 - m).MultI();

            Console.WriteLine("Jacobi.SN({0:G5}, {1:G5}) = {2:G5}", u, m, x1);

            Assert.That(x1, Ist.WithinTolOf(x2, VTOL));
        }

        [Test]
        public void JacobiDN_ImaginaryTransform([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x8deb7f10);

            Cmplx u = rng.RandCmplx(2.5);
            Cmplx m = rng.RandCmplx(2.5);

            Cmplx x1 = Jacobi.DN(u, m);
            Cmplx x2 = Jacobi.DN(u.MultI(), 1.0 - m) / Jacobi.CN(u.MultI(), 1.0 - m);

            Console.WriteLine("Jacobi.DN({0:G5}, {1:G5}) = {2:G5}", u, m, x1);

            Assert.That(x1, Ist.WithinTolOf(x2, VTOL));
        }

        [Test]
        public void JacobiSC_ImaginaryTransform([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x7a7a8d2f);

            Cmplx u = rng.RandCmplx(2.5);
            Cmplx m = rng.RandCmplx(2.5);

            Cmplx x1 = Jacobi.SC(u, m);
            Cmplx x2 = -Jacobi.SN(u.MultI(), 1.0 - m).MultI();

            Console.WriteLine("Jacobi.SC({0:G5}, {1:G5}) = {2:G5}", u, m, x1);

            Assert.That(x1, Ist.WithinTolOf(x2, VTOL));
        }

        #endregion

        #region Real Transform

        [Test]
        public void JacobiCN_RealTransform([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x64e14724);

            Cmplx u = rng.RandCmplx(2.5);
            Cmplx k = rng.RandCmplx(2.5);
            Cmplx m = k * k;

            Cmplx x1 = Jacobi.CN(u, m);
            Cmplx x2 = Jacobi.DN(k * u, 1.0 / m);

            Console.WriteLine("Jacobi.CN({0:G5}, {1:G5}) = {2:G5}", u, m, x1);

            Assert.That(x1, Ist.WithinTolOf(x2, VTOL));
        }

        [Test]
        public void JacobiSN_RealTransform([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x78c231b0);

            Cmplx u = rng.RandCmplx(2.5);
            Cmplx k = rng.RandCmplx(2.5);
            Cmplx m = k * k;

            Cmplx x1 = Jacobi.SN(u, m);
            Cmplx x2 = Jacobi.SN(k * u, 1.0 / m) / k;

            Console.WriteLine("Jacobi.CN({0:G5}, {1:G5}) = {2:G5}", u, m, x1);

            Assert.That(x1, Ist.WithinTolOf(x2, VTOL));
        }

        [Test]
        public void JacobiDN_RealTransform([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x4f6a4d30);

            Cmplx u = rng.RandCmplx(2.5);
            Cmplx k = rng.RandCmplx(2.5);
            Cmplx m = k * k;

            Cmplx x1 = Jacobi.DN(u, m);
            Cmplx x2 = Jacobi.CN(k * u, 1.0 / m);

            Console.WriteLine("Jacobi.DN({0:G5}, {1:G5}) = {2:G5}", u, m, x1);

            Assert.That(x1, Ist.WithinTolOf(x2, VTOL));
        }

        [Test]
        public void JacobiSC_RealTransform([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x994e1824);

            Cmplx u = rng.RandCmplx(2.5);
            Cmplx k = rng.RandCmplx(2.5);
            Cmplx m = k * k;

            Cmplx x1 = Jacobi.SC(u, m);
            Cmplx x2 = Jacobi.SN(k * u, 1.0 / m) / Jacobi.DN(k * u, 1.0 / m) / k;

            Console.WriteLine("Jacobi.SC({0:G5}, {1:G5}) = {2:G5}", u, m, x1);

            Assert.That(x1, Ist.WithinTolOf(x2, VTOL));
        }

        #endregion

        #region Square Relations

        [Test]
        public void JacobiCN_SquareRelation_Cmplx([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0xd1147600);

            Cmplx u = rng.RandCmplx(2.5);
            Cmplx m = rng.RandCmplx(2.5);

            Cmplx x1 = Jacobi.CN(u, m);
            x1 = x1 * x1;

            Cmplx x2 = Jacobi.SN(u, m);
            x2 = 1.0 - (x2 * x2);

            Console.WriteLine("Jacobi.CN^2({0:G5}, {1:G5}) = {2:G5}", u, m, x1);

            Assert.That(x1, Ist.WithinTolOf(x2, VTOL));
        }

        [Test]
        public void JacobiDN_SquareRelation_Cmplx([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x33b6ab08);

            Cmplx u = rng.RandCmplx(2.5);
            Cmplx m = rng.RandCmplx(2.5);

            Cmplx x1 = Jacobi.DN(u, m);
            x1 = x1 * x1;

            Cmplx cn = Jacobi.CN(u, m);
            Cmplx sn = Jacobi.SN(u, m);
            Cmplx x2 = (cn * cn) + ((1.0 - m) * sn * sn);

            Console.WriteLine("Jacobi.DN^2({0:G5}, {1:G5}) = {2:G5}", u, m, x1);

            Assert.That(x1, Ist.WithinTolOf(x2, VTOL));
        }

        [Test]
        public void JacobiCN_SquareRelation_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x026d13f6);

            double u = rng.RandGauss(0.0, 2.5);
            double m = rng.RandDouble(MinM, MaxM);

            double x1 = Jacobi.CN(u, m);
            x1 = x1 * x1;

            double x2 = Jacobi.SN(u, m);
            x2 = 1.0 - (x2 * x2);

            Console.WriteLine("Jacobi.CN^2({0:G5}, {1:G5}) = {2:G5}", u, m, x1);

            Assert.That(x1, Ist.WithinTolOf(x2, VTOL));
        }

        [Test]
        public void JacobiDN_SquareRelation_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0xfcba0b2c);

            double u = rng.RandGauss(0.0, 2.5);
            double m = rng.RandDouble(MinM, MaxM);

            double x1 = Jacobi.DN(u, m);
            x1 = x1 * x1;

            double cn = Jacobi.CN(u, m);
            double sn = Jacobi.SN(u, m);
            double x2 = (cn * cn) + ((1.0 - m) * sn * sn);

            Console.WriteLine("Jacobi.DN^2({0:G5}, {1:G5}) = {2:G5}", u, m, x1);

            Assert.That(x1, Ist.WithinTolOf(x2, VTOL));
        }

        #endregion

        #region HalfK Values

        [Test]
        public void JacobiSN_HalfK_Complex([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0xcfe64e80);

            //Cmplx k = rng.RandCmplx(2.5);
            //Cmplx m = k * k;
            Cmplx m = rng.RandCmplx(2.5);
            Cmplx u = 0.5 * Jacobi.K(m);

            Cmplx x1 = Jacobi.SN(u, m);
            Cmplx x2 = Cmplx.Sqrt(1.0 - m);
            x2 = 1.0 / Cmplx.Sqrt(1.0 + x2);

            Console.WriteLine("Jacobi.SN({0:G5}, {1:G5}) = {2:G5}", u, m, x1);

            Assert.That(x1, Ist.WithinTolOf(x2, VTOL));
        }

        [Test]
        public void JacobiCN_HalfK_Complex([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x5174b7eb);

            //Cmplx k = rng.RandCmplx(2.5);
            //Cmplx m = k * k;
            Cmplx m = rng.RandCmplx(2.5);
            Cmplx u = 0.5 * Jacobi.K(m);

            Cmplx x1 = Jacobi.CN(u, m);
            Cmplx x2 = Cmplx.Sqrt(1.0 - m);
            x2 = Cmplx.Sqrt(1.0 + x2);
            x2 = Cmplx.Pow(1.0 - m, 0.25) / x2;

            Console.WriteLine("Jacobi.CN({0:G5}, {1:G5}) = {2:G5}", u, m, x1);

            Assert.That(x1, Ist.WithinTolOf(x2, VTOL));
        }

        [Test]
        public void JacobiDN_HalfK_Complex([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x79a51ea1);

            //Cmplx k = rng.RandCmplx(2.5);
            //Cmplx m = k * k;
            Cmplx m = rng.RandCmplx(2.5);
            Cmplx u = 0.5 * Jacobi.K(m);

            Cmplx x1 = Jacobi.DN(u, m);
            Cmplx x2 = Cmplx.Pow(1 - m, 0.25);

            Console.WriteLine("Jacobi.DN({0:G5}, {1:G5}) = {2:G5}", u, m, x1);

            Assert.That(x1, Ist.WithinTolOf(x2, VTOL));
        }



        [Test]
        public void JacobiSN_HalfK_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x63193185);

            //double k = rng.RandDouble(0.0, 1.0);
            //double m = k * k;
            double m = rng.RandDouble(MinM, MaxM);
            double u = 0.5 * Jacobi.K(m);
            

            double x1 = Jacobi.SN(u, m);
            double x2 = Math.Sqrt(1.0 - m);
            x2 = 1.0 / Math.Sqrt(1.0 + x2);

            Console.WriteLine("Jacobi.SN({0:G5}, {1:G5}) = {2:G5}", u, m, x1);

            Assert.That(x1, Ist.WithinTolOf(x2, VTOL));
        }

        [Test]
        public void JacobiCN_HalfK_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0xdb44f27b);

            //double k = rng.RandDouble(0.0, 1.0);
            //double m = k * k;
            double m = rng.RandDouble(MinM, MaxM);
            double u = 0.5 * Jacobi.K(m);

            double x1 = Jacobi.CN(u, m);
            double x2 = Math.Sqrt(1.0 - m);
            x2 = Math.Sqrt(1.0 + x2);
            x2 = Math.Pow(1.0 - m, 0.25) / x2;

            Console.WriteLine("Jacobi.CN({0:G5}, {1:G5}) = {2:G5}", u, m, x1);

            Assert.That(x1, Ist.WithinTolOf(x2, VTOL));
        }

        [Test]
        public void JacobiDN_HalfK_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x187dcf47);

            //double k = rng.RandDouble(0.0, 1.0);
            //double m = k * k;
            double m = rng.RandDouble(MinM, MaxM);
            double u = 0.5 * Jacobi.K(m);

            double x1 = Jacobi.DN(u, m);
            double x2 = Math.Pow(1 - m, 0.25);

            Console.WriteLine("Jacobi.DN({0:G5}, {1:G5}) = {2:G5}", u, m, x1);

            Assert.That(x1, Ist.WithinTolOf(x2, VTOL));
        }

        #endregion

        #region Lemniscate By Jacobi

        [Test]
        public void LemniscateSL_ByJacobi_Cmplx([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x83cc321c);

            Cmplx a = rng.RandCmplx(2.5);

            Cmplx b1 = Jacobi.SL(a);
            Cmplx b2 = Jacobi.SN(a, -1.0);

            Console.WriteLine("Jacobi.SL({0:G5}) = {1:G5}", a, b1);

            Assert.That(b1, Ist.WithinTolOf(b2, LTol));
        }

        [Test]
        public void LemniscateCL_ByJacobi_Cmplx([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x9115ca61);

            Cmplx a = rng.RandCmplx(2.5);

            Cmplx b1 = Jacobi.CL(a);
            Cmplx b2 = Jacobi.CN(a, -1.0) / Jacobi.DN(a, -1.0);

            Console.WriteLine("Jacobi.CL({0:G5}) = {1:G5}", a, b1);

            Assert.That(b1, Ist.WithinTolOf(b2, LTol));
        }

        [Test]
        public void LemniscateSL_ByJacobi_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x6f51c33c);

            double a = rng.RandGauss(0.0, 2.5);

            double b1 = Jacobi.SL(a);
            double b2 = Jacobi.SN(a, -1.0);

            Console.WriteLine("Jacobi.SL({0:G5}) = {1:G5}", a, b1);

            Assert.That(b1, Ist.WithinTolOf(b2, LTol));
        }

        [Test]
        public void LemniscateCL_ByJacobi_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x330ec169);

            double a = rng.RandGauss(0.0, 2.5);

            double b1 = Jacobi.CL(a);
            double b2 = Jacobi.CN(a, -1.0) / Jacobi.DN(a, -1.0);

            Console.WriteLine("Jacobi.CL({0:G5}) = {1:G5}", a, b1);

            Assert.That(b1, Ist.WithinTolOf(b2, LTol));
        }

        #endregion

        #region Lemniscate Inverses

        [Test]
        public void LemniscateSL_Inverse_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0xa9309710);

            double a = rng.RandGauss(0.0, 2.5);
            double b = Jacobi.ArcSL(a);
            double a2 = Jacobi.SL(b);

            Console.WriteLine("Jacobi.ArcSL({0:G5}) = {1:G5}", a, b);

            Assert.That(a2, Ist.WithinTolOf(a, LTol));
        }

        [Test]
        public void LemniscateCL_Inverse_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x13d1af19);

            double a = rng.RandGauss(0.0, 2.5);
            double b = Jacobi.ArcCL(a);
            double a2 = Jacobi.CL(b);

            Console.WriteLine("Jacobi.ArcCL({0:G5}) = {1:G5}", a, b);

            Assert.That(a2, Ist.WithinTolOf(a, LTol));
        }

        [Test]
        public void LemniscateSL_Inverse_Cmplx([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x51473154);

            Cmplx a = rng.RandCmplx(2.5);
            Cmplx b = Jacobi.ArcSL(a);
            Cmplx a2 = Jacobi.SL(b);

            Console.WriteLine("Jacobi.ArcSL({0:G5}) = {1:G5}", a, b);

            Assert.That(a2, Ist.WithinTolOf(a, LTol));
        }

        [Test]
        public void LemniscateCL_Inverse_Cmplx([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x9d6459e5);

            Cmplx a = rng.RandCmplx(2.5);
            Cmplx b = Jacobi.ArcCL(a);
            Cmplx a2 = Jacobi.CL(b);

            Console.WriteLine("Jacobi.ArcCL({0:G5}) = {1:G5}", a, b);

            Assert.That(a2, Ist.WithinTolOf(a, LTol));
        }

        #endregion

        #region Lemniscate Symatries

        [Test]
        public void LemniscateCL_PlusHalfW_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x112406f6);

            double a = rng.RandGauss(0.0, 2.5);
            double b = a + (0.5 * VMath.LC);

            double x1 = Jacobi.CL(b);
            double x2 = -Jacobi.SL(a);

            Console.WriteLine("Jacobi.CL({0:G5}) = {1:G5}", b, x1);

            Assert.That(x1, Ist.WithinTolOf(x2, LTol));
        }

        [Test]
        public void LemniscateCL_MinusHalfW_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0xf93ddfb5);

            double a = rng.RandGauss(0.0, 2.5);
            double b = a - (0.5 * VMath.LC);

            double x1 = Jacobi.CL(b);
            double x2 = Jacobi.SL(a);

            Console.WriteLine("Jacobi.CL({0:G5}) = {1:G5}", b, x1);

            Assert.That(x1, Ist.WithinTolOf(x2, LTol));
        }

        [Test]
        public void LemniscateSL_PlusHalfW_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0xa74123fe);

            double a = rng.RandGauss(0.0, 2.5);
            double b = a + (0.5 * VMath.LC);

            double x1 = Jacobi.SL(b);
            double x2 = Jacobi.CL(a);

            Console.WriteLine("Jacobi.SL({0:G5}) = {1:G5}", b, x1);

            Assert.That(x1, Ist.WithinTolOf(x2, LTol));
        }

        [Test]
        public void LemniscateSL_MinusHalfW_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x49181257);

            double a = rng.RandGauss(0.0, 2.5);
            double b = a - (0.5 * VMath.LC);

            double x1 = Jacobi.SL(b);
            double x2 = -Jacobi.CL(a);

            Console.WriteLine("Jacobi.SL({0:G5}) = {1:G5}", b, x1);

            Assert.That(x1, Ist.WithinTolOf(x2, LTol));
        }

        [Test]
        public void LemniscateCL_PlusHalfW_Cmplx([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x7841029e);

            Cmplx a = rng.RandCmplx(2.5);
            Cmplx b = a + (0.5 * VMath.LC * Cmplx.I);

            Cmplx x1 = Jacobi.CL(b);
            Cmplx x2 = -Cmplx.I / Jacobi.SL(a);

            Console.WriteLine("Jacobi.CL({0:G5}) = {1:G5}", b, x1);

            Assert.That(x1, Ist.WithinTolOf(x2, LTol));
        }

        [Test]
        public void LemniscateCL_MinusHalfW_Cmplx([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x59a29992);

            Cmplx a = rng.RandCmplx(2.5);
            Cmplx b = a - (0.5 * VMath.LC * Cmplx.I);

            Cmplx x1 = Jacobi.CL(b);
            Cmplx x2 = Cmplx.I / Jacobi.SL(a);

            Console.WriteLine("Jacobi.CL({0:G5}) = {1:G5}", b, x1);

            Assert.That(x1, Ist.WithinTolOf(x2, LTol));
        }

        [Test]
        public void LemniscateSL_PlusHalfW_Cmplx([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x6c6b29e3);

            Cmplx a = rng.RandCmplx(2.5);
            Cmplx b = a + (0.5 * VMath.LC * Cmplx.I);

            Cmplx x1 = Jacobi.SL(b);
            Cmplx x2 = Cmplx.I / Jacobi.CL(a);

            Console.WriteLine("Jacobi.SL({0:G5}) = {1:G5}", b, x1);

            Assert.That(x1, Ist.WithinTolOf(x2, LTol));
        }

        [Test]
        public void LemniscateSL_MinusHalfW_Cmplx([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0xe9d395a0);

            Cmplx a = rng.RandCmplx(2.5);
            Cmplx b = a - (0.5 * VMath.LC * Cmplx.I);

            Cmplx x1 = Jacobi.SL(b);
            Cmplx x2 = -Cmplx.I / Jacobi.CL(a);

            Console.WriteLine("Jacobi.SL({0:G5}) = {1:G5}", b, x1);

            Assert.That(x1, Ist.WithinTolOf(x2, LTol));
        }

        #endregion

        #region Lemniscate Square Identites

        [Test]
        public void LemniscatecL_Squared_Cmplx([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0xfcb317b0);

            Cmplx a = rng.RandCmplx(2.5);

            Cmplx cl = Jacobi.CL(a);
            Cmplx sl = Jacobi.SL(a);

            cl = cl * cl;
            sl = sl * sl;

            Cmplx x = (1.0 - sl) / (1.0 + sl);

            Console.WriteLine("Jacobi.CL^2({0:G5}) = {1:G5}", a, cl);

            Assert.That(x, Ist.WithinTolOf(cl, LTol));             
        }

        [Test]
        public void LemniscateSL_Squared_Cmplx([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x4994618b);

            Cmplx a = rng.RandCmplx(2.5);

            Cmplx cl = Jacobi.CL(a);
            Cmplx sl = Jacobi.SL(a);

            cl = cl * cl;
            sl = sl * sl;

            Cmplx x = (1.0 - cl) / (1.0 + cl);

            Console.WriteLine("Jacobi.SL^2({0:G5}) = {1:G5}", a, sl);

            Assert.That(x, Ist.WithinTolOf(sl, LTol));
        }

        [Test]
        public void LemniscatecL_Squared_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x0248b3cb);

            double a = rng.RandGauss(0.0, 2.5);

            double cl = Jacobi.CL(a);
            double sl = Jacobi.SL(a);

            cl = cl * cl;
            sl = sl * sl;

            double x = (1.0 - sl) / (1.0 + sl);

            Console.WriteLine("Jacobi.CL^2({0:G5}) = {1:G5}", a, cl);

            Assert.That(x, Ist.WithinTolOf(cl, LTol));
        }

        [Test]
        public void LemniscateSL_Squared_Real([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x43e98e1d);

            double a = rng.RandGauss(0.0, 2.5);

            double cl = Jacobi.CL(a);
            double sl = Jacobi.SL(a);

            cl = cl * cl;
            sl = sl * sl;

            double x = (1.0 - cl) / (1.0 + cl);

            Console.WriteLine("Jacobi.SL^2({0:G5}) = {1:G5}", a, sl);

            Assert.That(x, Ist.WithinTolOf(sl, LTol));
        }

        #endregion

        #region Dixion Identites...

        [Test]
        public void DixonCM_Conjugation_Distributes([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x10ea3efb);

            Cmplx z = rng.RandCmplx(2.5);

            Cmplx a = Jacobi.CM(z.Conj());
            Cmplx b = Jacobi.CM(z).Conj();

            Assert.That(b, Ist.WithinTolOf(a, VTOL));
        }

        [Test]
        public void DixonSM_Conjugation_Distributes([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0xb6dea738);

            Cmplx z = rng.RandCmplx(2.5);

            Cmplx a = Jacobi.SM(z.Conj());
            Cmplx b = Jacobi.SM(z).Conj();

            Assert.That(b, Ist.WithinTolOf(a, VTOL));
        }

        [Test]
        public void DixonCM_ReflectInversion_CMplx([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x0c0d0bd2);

            Cmplx z = rng.RandCmplx(2.5);

            Cmplx a = Jacobi.CM(-z);
            Cmplx b = 1.0 / Jacobi.CM(z);

            Assert.That(b, Ist.WithinTolOf(a, VTOL));
        }

        [Test]
        public void DixonSM_InversionShift_Cmplx([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x9a1841b2);

            Cmplx z = rng.RandCmplx(2.5);

            Cmplx a = Jacobi.SM(-z);
            Cmplx b = 1.0 / Jacobi.SM(z - 1.7666387502854499573);

            Assert.That(b, Ist.WithinTolOf(a, VTOL));
        }

        #endregion

        #region Dixon Inversion...

        [Test]
        public void DixonSM_Inverse_Cmplx([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x51473154);

            Cmplx a = rng.RandCmplx(2.5);
            Cmplx b = Jacobi.ArcSM(a);
            Cmplx a2 = Jacobi.SM(b);

            Console.WriteLine("Jacobi.ArcSM({0:G5}) = {1:G5}", a, b);

            Assert.That(a2, Ist.WithinTolOf(a, VTOL));
        }

        [Test]
        public void DixonCM_Inverse_Cmplx([Range(1, NumTests)] int index)
        {
            VRandom rng = Help.GetRNG(index, 0x9d6459e5);

            Cmplx a = rng.RandCmplx(2.5);
            Cmplx b = Jacobi.ArcCM(a);
            Cmplx a2 = Jacobi.CM(b);

            Console.WriteLine("Jacobi.ArcCM({0:G5}) = {1:G5}", a, b);

            Assert.That(a2, Ist.WithinTolOf(a, VTOL));
        }


        #endregion



        //Note:
        //Add more tests for the Lemniscate Functions
        //Add tests comparing K and E
        //Consider adding pre-computed values for both E funcitons
        //Add dixon eleptic funcitons as well. (maybe)

        //The Dixon Eleptic Functions arn't in Wolfram Alpha

    }
}
