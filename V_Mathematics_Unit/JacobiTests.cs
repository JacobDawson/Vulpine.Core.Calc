using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using NUnit.Framework;
using NUnit.Framework.Constraints;
using Vulpine_Core_Calc_Tests.AddOns;

using Vulpine.Core.Calc;
using Vulpine.Core.Calc.Numbers;


namespace Vulpine_Core_Calc_Tests
{
    [TestFixture]
    class JacobiTests
    {
        /// <summary>
        /// the tollarance used in desk calculations. it represents the minimum
        /// amound of relative error allowed in numeric aproximations.
        /// </summary>
        public const Double VTOL = 1.0e-12;

        //stores a rerenece to the tolarance for this instance
        private double tol;

        public JacobiTests() { tol = VTOL; }
        public JacobiTests(double tol) { this.tol = tol; }


        private static readonly double[][] K_WideValues =
        {
            new double[] {-4.0, -4.0, +0.9226456659702936, -0.1931692873996115},
            new double[] {-4.0, -3.0, +0.9547943021918690, -0.1578510441164987},
            new double[] {-4.0, -2.0, +0.9827836618197414, -0.1130037219922447},
            new double[] {-4.0, -1.0, +1.0023538882006214, -0.0592813395948073},
            new double[] {-4.0, +0.0, +1.0094529099892116, +0.0},
            new double[] {-4.0, +1.0, +1.0023538882006214, +0.0592813395948073},
            new double[] {-4.0, +2.0, +0.9827836618197414, +0.1130037219922447},
            new double[] {-4.0, +3.0, +0.9547943021918690, +0.1578510441164987},
            new double[] {-4.0, +4.0, +0.9226456659702936, +0.1931692873996115},

            new double[] {-3.0, -4.0, +0.9535789488040512, -0.2309304450374611},
            new double[] {-3.0, -3.0, +0.9966796083098644, -0.1941136432700918},
            new double[] {-3.0, -2.0, +1.0368869696797009, -0.1430138907757651},
            new double[] {-3.0, -1.0, +1.0669043258292005, -0.0767626332742274},
            new double[] {-3.0, +0.0, +1.0782578237498216, +0.0},
            new double[] {-3.0, +1.0, +1.0669043258292005, +0.0767626332742274},
            new double[] {-3.0, +2.0, +1.0368869696797009, +0.1430138907757651},
            new double[] {-3.0, +3.0, +0.9966796083098644, +0.1941136432700918},
            new double[] {-3.0, +4.0, +0.9535789488040512, +0.2309304450374611},

            new double[] {-2.0, -4.0, +0.9828072859190707, -0.2798612805636197},
            new double[] {-2.0, -3.0, +1.0408718798817036, -0.2449711163048068},
            new double[] {-2.0, -2.0, +1.1008325556573280, -0.1891623873371161},
            new double[] {-2.0, -1.0, +1.1508953676782991, -0.1059888365485736},
            new double[] {-2.0, +0.0, +1.1714200841467698, +0.0},
            new double[] {-2.0, +1.0, +1.1508953676782991, +0.1059888365485736},
            new double[] {-2.0, +2.0, +1.1008325556573280, +0.1891623873371161},
            new double[] {-2.0, +3.0, +1.0408718798817036, +0.2449711163048068},
            new double[] {-2.0, +4.0, +0.9828072859190707, +0.2798612805636197},

            new double[] {-1.0, -4.0, +1.0055145128822043, -0.3420446575053614},
            new double[] {-1.0, -3.0, +1.0818616094704879, -0.3166313240911675},
            new double[] {-1.0, -2.0, +1.1727767266293722, -0.2643613655297735},
            new double[] {-1.0, -1.0, +1.2654855220565945, -0.1622369065268035},
            new double[] {-1.0, +0.0, +1.3110287771460599, +0.0},
            new double[] {-1.0, +1.0, +1.2654855220565945, +0.1622369065268035},
            new double[] {-1.0, +2.0, +1.1727767266293722, +0.2643613655297735},
            new double[] {-1.0, +3.0, +1.0818616094704879, +0.3166313240911675},
            new double[] {-1.0, +4.0, +1.0055145128822043, +0.3420446575053614},

            new double[] {+0.0, -4.0, +1.0142199528916402, -0.4167613759836460},
            new double[] {+0.0, -3.0, +1.1066577086973747, -0.4131446756023009},
            new double[] {+0.0, -2.0, +1.2360754981828200, -0.3889182790156602},
            new double[] {+0.0, -1.0, +1.4212722810450360, -0.2953802842147768},
            new double[] {+0.0, +0.0, +1.5707963267948966, +0.0},
            new double[] {+0.0, +1.0, +1.4212722810450360, +0.2953802842147768},
            new double[] {+0.0, +2.0, +1.2360754981828200, +0.3889182790156602},
            new double[] {+0.0, +3.0, +1.1066577086973747, +0.4131446756023009},
            new double[] {+0.0, +4.0, +1.0142199528916402, +0.4167613759836460},

            new double[] {+1.0, -4.0, +1.0012902954809083, -0.4974791089591366},
            new double[] {+1.0, -3.0, +1.0962184367320241, -0.5261202157806421},
            new double[] {+1.0, -2.0, +1.2396974481062428, -0.5649930987575376},
            new double[] {+1.0, -1.0, +1.5092369540512728, -0.6251464152026968},
            //////////// {+1.0, +0.0, INF, INF},
            new double[] {+1.0, +1.0, +1.5092369540512728, +0.6251464152026968},
            new double[] {+1.0, +2.0, +1.2396974481062428, +0.5649930987575376},
            new double[] {+1.0, +3.0, +1.0962184367320241, +0.5261202157806421},
            new double[] {+1.0, +4.0, +1.0012902954809083, +0.4974791089591366},

            new double[] {+2.0, -4.0, +0.9647645498664313, -0.5724252293654310},
            new double[] {+2.0, -3.0, +1.0429132919285160, -0.6296824723086412},
            new double[] {+2.0, -2.0, +1.1477936578355437, -0.7231645198844604},
            new double[] {+2.0, -1.0, +1.2829845888842128, -0.9093670609379803},
            new double[] {+2.0, +0.0, +1.3110287771460599, -1.3110287771460599},
            new double[] {+2.0, +1.0, +1.2829845888842128, +0.9093670609379803},
            new double[] {+2.0, +2.0, +1.1477936578355437, +0.7231645198844604},
            new double[] {+2.0, +3.0, +1.0429132919285160, +0.6296824723086412},
            new double[] {+2.0, +4.0, +0.9647645498664313, +0.5724252293654310},

            new double[] {+3.0, -4.0, +0.9111955638049650, -0.6313342832413452},
            new double[] {+3.0, -3.0, +0.9633740558183941, -0.7017449794606113},
            new double[] {+3.0, -2.0, +1.0170435642865263, -0.8062531787336743},
            new double[] {+3.0, -1.0, +1.0495633400512788, -0.9647117763139704},
            new double[] {+3.0, +0.0, +1.0010773804561062, -1.1714200841467698},
            new double[] {+3.0, +1.0, +1.0495633400512788, +0.9647117763139704},
            new double[] {+3.0, +2.0, +1.0170435642865263, +0.8062531787336743},
            new double[] {+3.0, +3.0, +0.9633740558183941, +0.7017449794606113},
            new double[] {+3.0, +4.0, +0.9111955638049650, +0.6313342832413452},

            new double[] {+4.0, -4.0, +0.8507791690905825, -0.6710823994252824},
            new double[] {+4.0, -3.0, +0.8799482869097269, -0.7412691086931250},
            new double[] {+4.0, -2.0, +0.8997593611897471, -0.8338933759653302},
            new double[] {+4.0, -1.0, +0.8943644725836783, -0.9508137364393680},
            new double[] {+4.0, +0.0, +0.8428751774062980, -1.0782578237498216},
            new double[] {+4.0, +1.0, +0.8943644725836783, +0.9508137364393680},
            new double[] {+4.0, +2.0, +0.8997593611897471, +0.8338933759653302},
            new double[] {+4.0, +3.0, +0.8799482869097269, +0.7412691086931250},
            new double[] {+4.0, +4.0, +0.8507791690905825, +0.6710823994252824},

            
        };


        [Test]
        public void KTest_WideValues([Range(0, 79)] int index)
        {
            double[] vals = K_WideValues[index];
            Cmplx a = new Cmplx(vals[0], vals[1]);
            Cmplx b = new Cmplx(vals[2], vals[3]);

            Cmplx res = Jacobi.K(a);

            Assert.That(res, Ist.WithinTolOf(b, tol));
        }
    }
}
