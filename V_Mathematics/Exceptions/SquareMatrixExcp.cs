/**
 *  This file is an integral part of the Vulpine Core Library: 
 *  Copyright (c) 2016-2017 Benjamin Jacob Dawson. 
 *
 *      http://www.jakesden.com/corelibrary.html
 *
 *  This file is licensed under the Apache License, Version 2.0 (the "License"); 
 *  you may not use this file except in compliance with the License. You may 
 *  obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.    
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Vulpine.Core.Calc.Matrices;

namespace Vulpine.Core.Calc.Exceptions
{
    /// <summary>
    /// When deleing with matricies, and matrix-like objects, several operations are
    /// definable only for square matricies. If sutch matrices are allowed non-square
    /// dimentions, then it becaumes nessary to check for square matricies. This is
    /// the exception thrown when a non-square matrix is given where a square matrix
    /// was expected instead.
    /// </summary>
    /// <remarks>Last Update: 2014-01-03</remarks>
    public class SquareMatrixExcp : MathematicsExcp
    {
        #region Class Definitions...

        /// <summary>
        /// The default message generated by a square matrix exception, prior to 
        /// applying any special case formating.
        /// </summary>
        public const string MSG = "A non-square matrix was given. You could try "
            + "multiplying the matrix by it's transpose inorder to make it square.";

        //stores the dimentions of the offending matrix
        private int width;
        private int height;

        /// <summary>
        /// Generates a new square matrix exception, passing on the dimentions
        /// of the offending matrix.
        /// </summary>
        /// <param name="width">The width, or number of colunms in the matrix</param>
        /// <param name="height">The height, or number of rows in the matrix</param>
        protected SquareMatrixExcp(int width, int height) : base()
        {
            this.width = width;
            this.height = height;
        }

        #endregion /////////////////////////////////////////////////////////////////////

        #region Class Properties...

        /// <summary>
        /// Generates a custom message, indicating the nature of the exception.
        /// Read-Only
        /// </summary>
        public override string Message
        {
            get { return MSG; }
        }

        /// <summary>
        /// Represents the width, or number of columns, in the matrix that
        /// caused the exception. Read-Only
        /// </summary>
        public int Width
        {
            get { return width; }
        }

        /// <summary>
        /// Represents the height, or number of rows, in the matrix that
        /// caused the exception. Read-Only
        /// </summary>
        public int Height
        {
            get { return height; }
        }

        #endregion /////////////////////////////////////////////////////////////////////

        #region Factory Methods...

        /// <summary>
        /// Dtermins if the given width and length match, if they do not a
        /// square matrix exception is thrown. Otherwise, nothing happens.
        /// </summary>
        /// <param name="width">The width, or number of columns in the matrix</param>
        /// <param name="height">The height, or number of rows in the matrix</param>
        public static void Check(int width, int height)
        {
            //throws an exception if the check condtions are not met
            if (width != height) throw new SquareMatrixExcp(width, height);
        }

        /// <summary>
        /// Determins if the given matrix is indeed square, if it is not a
        /// square matrix exception is thrown. Otherwise, nothing happens.
        /// </summary>
        /// <param name="matrix">The matrix to be checked</param>
        public static void Check(Matrix matrix)
        {
            //throws an exception if the check condtions are not met
            if (matrix.NumColumns != matrix.NumRows) 
            throw new SquareMatrixExcp(matrix.NumColumns, matrix.NumRows);
        }

        #endregion /////////////////////////////////////////////////////////////////////
    }
}
