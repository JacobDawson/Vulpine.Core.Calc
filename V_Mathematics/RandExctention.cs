using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Vulpine.Core.Data.RandGen;
using Vulpine.Core.Data.Exceptions;
using Vulpine.Core.Calc.Exceptions;
using Vulpine.Core.Calc.Geometry;

namespace Vulpine.Core.Calc
{
    public static class RandExctention
    {
        #region Random Doubles...

        /// <summary>
        /// Generates a random, positive, floating-point value up to, but not
        /// including, the given maximum.
        /// </summary>
        /// <param name="rand">Generator for random numbers</param>
        /// <param name="max">Maximum vlaue to generate</param>
        /// <returns>A psudo-random value within the given bounds</returns>
        /// <exception cref="ArgBoundsException">If the max value is
        /// not a positive number</exception>
        public static double RandDouble(this VRandom rand, double max)
        {
            //makes shure that the maximum value is positive
            ArgBoundsException.Atleast("max", max, 0.0);

            //computes our random number
            return rand.NextDouble() * max;
        }

        /// <summary>
        /// Generates a random floating-point vlaue between two given bounds,
        /// excluding the posiblility of returning the upper bound.
        /// </summary>
        /// <param name="rand">Generator for random numbers</param>
        /// <param name="low">Lower bound, inclued in range</param>
        /// <param name="high">Upper bound, excluded from range</param>
        /// <returns>A psudo-random value within the given bounds</returns>
        /// <exception cref="InvBracketExcp">If the upper bound is greator
        /// than the lower bound</exception>
        public static double RandDouble(this VRandom rand, double low, double high)
        {
            //makes shure we have a valid bracket
            InvBracketExcp.CheckOrder(low, high);

            //computes our random number
            double next = rand.NextDouble();
            return ((next * (high - low)) + low);
        }

        #endregion //////////////////////////////////////////////////////////////////////

        #region Random Points...

        /// <summary>
        /// Generates a random point inside the unit square, defined by the points
        /// (0, 0) and (1, 1). The points generated by this method should be
        /// uniformaly distributed over the square.
        /// </summary>
        /// <param name="rand">Generator for random numbers</param>
        /// <returns>A psudo-random point inside the uint square</returns>
        public static Point2D PointRect(this VRandom rand)
        {
            double x = rand.NextDouble();
            double y = rand.NextDouble();
            return new Point2D(x, y);
        }

        /// <summary>
        /// Generates a random point inside the rectangle defined by the points
        /// p0 and p1. The points generated by this method should be
        /// uniformaly distributed inside the rectangle.
        /// </summary>
        /// <param name="rand">Generator for random numbers</param>
        /// <param name="p0">First point defining the rectangle</param>
        /// <param name="p1">Second point defining the rectangle</param>
        /// <returns>A psudo-random point inside the rectangel</returns>
        public static Point2D PointRect(this VRandom rand, Point2D p0, Point2D p1)
        {
            //computes the desired bounds
            double x0 = Math.Min(p0.X, p1.X);
            double x1 = Math.Max(p0.X, p1.X);
            double y0 = Math.Min(p0.Y, p1.Y);
            double y1 = Math.Max(p0.Y, p1.Y);

            //generates the random point
            double x = rand.RandDouble(x0, x1);
            double y = rand.RandDouble(y0, y1);
            return new Point2D(x, y);
        }

        /// <summary>
        /// Generates a random point inside the unit circle. That is, a circle
        /// centred at the origin, having radius one.
        /// </summary>
        /// <param name="rand">Generator for random numbers</param>
        /// <returns>A psudo-random point inside the circle</returns>
        public static Point2D PointCircle(this VRandom rand)
        {
            //locates the point in polar cordinates
            double r = rand.NextDouble();
            double t = rand.NextDouble() * VMath.TAU;

            //generates the desired point
            double x = Math.Cos(t) * r;
            double y = Math.Sin(t) * r;
            return new Point2D(x, y);
        }

        /// <summary>
        /// Generates a random point inside a circle, centered at a given point.
        /// The distance between the point and the center is garenteed to be
        /// less than the maximum radius.
        /// </summary>
        /// <param name="rand">Generator for random numbers</param>
        /// <param name="c">Center of the circle</param>
        /// <param name="rmax">Maximum radius of the circle</param>
        /// <returns>A psudo-random point inside the circle</returns>
        /// <exception cref="ArgBoundsException">If the maximum radius
        /// is less than zero</exception>
        public static Point2D PointCircle(this VRandom rand, Point2D c, double rmax)
        {
            //checks that the radius is poisitive
            ArgBoundsException.Atleast("rmax", rmax, 0.0);

            //locates the point in polar cordinates
            double r = rand.RandDouble(rmax);
            double t = rand.RandDouble(VMath.TAU);

            //generates the desired point
            double x = Math.Cos(t) * r + c.X;
            double y = Math.Sin(t) * r + c.Y;
            return new Point2D(x, y);
        }

        /// <summary>
        /// Generates a random point inside a circle, centred at a given point.
        /// The distance between the point and the center is garenteed to be
        /// within the bounds given. 
        /// </summary>
        /// <param name="rand">Generator for random numbers</param>
        /// <param name="c">Center of the circle</param>
        /// <param name="r0">Minimum radius of inner circle</param>
        /// <param name="r1">Maximum radius of outter circle</param>
        /// <returns>A psudo-random point inside the circle</returns>
        /// <exception cref="ArgBoundsException">If either the inner radius
        /// or the outer radious is less than zero</exception>
        /// <exception cref="InvBracketExcp">If the inner radius is greator
        /// than the outer radius</exception>
        public static Point2D PointCircle
            (this VRandom rand, Point2D c, double r0, double r1)
        {
            //checks that we have a valid positive bracket
            ArgBoundsException.Atleast("r0", r0, 0.0);
            InvBracketExcp.CheckOrder(r0, r1);

            //locates the point in polar cordinates
            double r = rand.RandDouble(r0, r1);
            double t = rand.RandDouble(VMath.TAU);

            //generates the desired point
            double x = Math.Cos(t) * r + c.X;
            double y = Math.Sin(t) * r + c.Y;
            return new Point2D(x, y);
        }

        #endregion //////////////////////////////////////////////////////////////////////


    }
}
